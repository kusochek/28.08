// RENDER EXIST USERS
// const controller = (action) => fetch(action).then((data) => data.json());
const wrapper = document.querySelector('.wrapper');

// controller('json/users.json')
// 	.then((data) => {
// 		Promise.allSettled(data.users.map((user) => controller(`json/${user.name.toLowerCase()}.json`)))
// 			.then((response) => {
// 				return response
// 					.filter((promiseResult) => promiseResult.status !== 'rejected')
// 					.map((promiseResult) => promiseResult.value);
// 			})
// 			.then((users) => {
				// users.forEach((user) => {
				// 	const ul = document.createElement('ul');
				// 	const name = document.createElement('li');
				// 	const avatar = document.createElement('li');

				// 	name.innerText = user.name;
				// 	avatar.innerText = user.avatar;

				// 	ul.append(name, avatar);
				// 	wrapper.append(ul);
				// });
// 			})
// 	});


// async/await
// try catch

// async function controller(action) {
// 	const request = await fetch(action);
// 	const data = await request.json();

// 	return data;
// }

// async function getUserData() {
// 	const data = await controller('json/users.json');

// 	const promiseResult = await Promise.allSettled((data.users.map((user) => controller(`json/${user.name.toLowerCase()}.json`))));
// 	promiseResult
// 		.filter((promiseResult) => promiseResult.status !== 'rejected')
// 		.forEach((promiseResult) => renderUser(promiseResult.value));
// }

// function renderUser(user) {
// 	const ul = document.createElement('ul');
// 	const name = document.createElement('li');
// 	const avatar = document.createElement('li');

// 	name.innerText = user.name;
// 	avatar.innerText = user.avatar;

// 	ul.append(name, avatar);
// 	wrapper.append(ul);
// }

// getUserData();


// EXAMPLE 1
// FIND USER BY EMAIL AND RENDER HIM

// const button = document.querySelector('#button');

// async function controller(action) {
// 	try {
// 		const request = await fetch(action);
// 		const data = await request.json();
	
// 		return data;
// 	} catch(err) {
// 		console.log(err);
// 	}
// }

// async function loginUser(email) {
// 	try {
// 		const data = await controller('json/users.json');
// 		const userInDataBase = data.users.find((user) => user.email === email);
	
// 		if (userInDataBase.name) {
// 			const user = await controller(`json/${userInDataBase.name.toLowerCase()}.json`);
// 			renderUser(user);
// 		}
// 	} catch(err) {
// 		console.log(err);
// 	} finally {
// 		console.log('Hello!');
// 	}
// }

// function renderUser(user) {
// 	const ul = document.createElement('ul');
// 	const name = document.createElement('li');
// 	const avatar = document.createElement('li');

// 	name.innerText = user.name;
// 	avatar.innerText = user.avatar;

// 	ul.append(name, avatar);
// 	wrapper.append(ul);
// }

// button.addEventListener('click', () => {
// 	const email = document.querySelector('#email').value;

// 	if (email) loginUser(email);
// });




// REST

// API: https://jsonplaceholder.typicode.com/

// 'https://jsonplaceholder.typicode.com/comments?userId=1'

// URL
// 	protocol http/https
// 	domain
// 	path
// 	queryParameter

// METHOD
// 	GET ‚Äì –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// 	POST * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (body)
// 	PUT * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞)
// 	PATCH * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
// 	DELETE

// BODY

// HEADERS ‚Äì —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–æ–¥–∏—Ä–æ–≤–∫–∞, —Å–∂–∞—Ç–∏–µ, —Å–µ—Ä–≤–µ—Ä, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)

// STATUS
// 	100
// 		101

// 	200
// 		201
// 		204

// 	300
// 		301
// 		302

// 	400 ‚Äì –æ—à–∏–±–∫–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
// 		401
// 		403
// 		404

// 	500 ‚Äì –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
// 		502
// 		503

// https://jsonplaceholder.typicode.com/

// REST ‚Äì –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
// —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π), –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∫–ª–∏–µ–Ω—Ç (web app, mobile app) –∏ —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å

// REST –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å –æ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–∞–∫ –æ —Ä–µ—Å—É—Ä—Å–µ.
// –£ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å —Å–≤–æ–π URL. 

// LIST ‚Äì GET /posts // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts
// ITEM ‚Äì GET /posts/:id // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts —Å :id

// ADD ‚Äì POST /posts     body:{name: Alex, age: 21} // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts c —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞, id –≤—Å–µ–≥–¥–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
// <== {id: 101, name: Alex, age: 21}

// FULL UPDATE ‚Äì PUT /posts/:id  body:{id: 101, name: Ivan} // –≤ body –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞
// <== {id: 101, name: Ivan}

// PARTIAL UPDATE ‚Äì PATCH /posts/:id body:{name: ''} // –≤ body –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
// <== {id: 101, name: Eve, age: 21}

// DELETE ‚Äì /posts/:id
// <== {}

// RESTfull Api ‚Äì —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—å –≤ –≤–∞–∫—É—É–º–µ üòå

// const API = "https://jsonplaceholder.typicode.com";

// const API = 'https://jsonplaceholder.typicode.com';
// const createButton = document.querySelector('#create');
// const updateButton = document.querySelector('#update');
// const deleteButton = document.querySelector('#delete');

// const METHOD = {
// 	GET: 'GET',
// 	POST: 'POST',
// 	PUT: 'PUT',
// 	PATCH: 'PATCH',
// 	DELETE: 'DELETE',
// };

// async function controller(action, method = METHOD.GET, body) {
// 	const headers = {
// 		'Content-type': 'application/json; charset=UTF-8',
// 	};

// 	const request = {
// 		method,
// 		headers,
// 	};

// 	if (body) request.body = JSON.stringify(body);

// 	const response = await fetch(action, request);
// 	const data = await response.json();

// 	return data;
// }

// async function getPosts() {
// 	const posts = await controller(`${API}/posts`);
// 	console.log(posts);
// }

// async function createPost() {
// 	const newPost = {
// 		title: 'foo',
//     body: 'bar',
//     userId: 1,
// 	};
// 	const response = await controller(`${API}/posts`, METHOD.POST, newPost);
// 	console.log(response);
// }

// async function updatePost(postId) {
// 	const currentPost = await controller(`${API}/posts/${postId}`);

// 	const updatedPost = { ...currentPost, title: 'Some Title', body: 'Body', userId: 7 };
// 	const response = await controller(`${API}/posts/${postId}`, METHOD.PUT, updatedPost);
// 	console.log(response);
// }

// async function updateFieldPost(postId) {
// 	const response = await controller(`${API}/posts/${postId}`, METHOD.PATCH, { title: 'New Title' });
// 	console.log(response);
// }

// async function deletePost(postId) {
// 	const response = await controller(`${API}/posts/${postId}`, METHOD.DELETE);
// 	console.log(response);
// }

// getPosts();

// createButton.addEventListener('click', createPost);
// updateButton.addEventListener('click', () => updateFieldPost(10));
// deleteButton.addEventListener('click', () => deletePost(9));
